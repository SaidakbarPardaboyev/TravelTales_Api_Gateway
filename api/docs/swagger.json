{
    "swagger": "2.0",
    "info": {
        "description": "Sayohatchilar o'rtasida tajriba almashish, sayohat rejalarini tuzish va boshqalar bilan bo'lishish imkoniyatini yaratish orqali global sayohat hamjamiyatini shakllantirish.",
        "title": "TravelTales App",
        "contact": {
            "name": "Saidakbar",
            "url": "http://www.support_me_with_smile",
            "email": "\"pardaboyevsaidakbar103@gmail.com\""
        },
        "version": "1.0"
    },
    "host": "localhost:4444",
    "basePath": "/travel",
    "paths": {
        "/interaction/comment/create": {
            "post": {
                "description": "this is for writing comment to story",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Interaction"
                ],
                "summary": "Write Comment To Story",
                "parameters": [
                    {
                        "description": "all params are required",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/interactions.RequestCreateComment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "returns comment information",
                        "schema": {
                            "$ref": "#/definitions/interactions.ResponseCreateComment"
                        }
                    },
                    "400": {
                        "description": "It occurs when user enter invalid params",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "It occurs when error happenes internal service",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/stories": {
            "get": {
                "description": "this is for getting stories information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stories"
                ],
                "summary": "Get stories info",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "limit is required",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page is required",
                        "name": "page",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "returns stories information",
                        "schema": {
                            "$ref": "#/definitions/stories.ResponseGetStories"
                        }
                    },
                    "400": {
                        "description": "It occurs when user enter invalid params",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "It occurs when error happenes internal service",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/stories/{id}/comments": {
            "get": {
                "description": "this is for getting comments information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Interaction"
                ],
                "summary": "Get Comments info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id is required",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit is required",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page is required",
                        "name": "page",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "returns comments information",
                        "schema": {
                            "$ref": "#/definitions/interactions.ResponseGetComments"
                        }
                    },
                    "400": {
                        "description": "It occurs when user enter invalid params",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "It occurs when error happenes internal service",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/stories/{id}/delete": {
            "delete": {
                "description": "this is for deleting story",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stories"
                ],
                "summary": "Delete Story",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id is required",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "returns message about deleting story",
                        "schema": {
                            "$ref": "#/definitions/stories.ResponseDeleteStory"
                        }
                    },
                    "400": {
                        "description": "It occurs when user enter invalid params",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "It occurs when error happenes internal service",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/stories/{id}/edit": {
            "put": {
                "description": "this is for editing story",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stories"
                ],
                "summary": "Edit Story",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id is required",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "all params are required",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/stories.RequestEditStory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "returns story information",
                        "schema": {
                            "$ref": "#/definitions/stories.ResponseEditStory"
                        }
                    },
                    "400": {
                        "description": "It occurs when user enter invalid params",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "It occurs when error happenes internal service",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/stories/{id}/fullinfo": {
            "get": {
                "description": "this is for getting full information about a story",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stories"
                ],
                "summary": "Get Full Story Info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id is required",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "returns full story information",
                        "schema": {
                            "$ref": "#/definitions/stories.ResponseGetStoryFullInfo"
                        }
                    },
                    "400": {
                        "description": "It occurs when user enter invalid params",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "It occurs when error happenes internal service",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/stories/{id}/like": {
            "post": {
                "description": "this is for liking stories",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Interaction"
                ],
                "summary": "Like Story",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id is required",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "all params are required",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/interactions.RequestLikeStory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "returns like information",
                        "schema": {
                            "$ref": "#/definitions/interactions.ResponseLikeStory"
                        }
                    },
                    "400": {
                        "description": "It occurs when user enter invalid params",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "It occurs when error happenes internal service",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "this is for getting user information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get Users info",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "limit is required",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page is required",
                        "name": "page",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "returns users information",
                        "schema": {
                            "$ref": "#/definitions/users.ResponseGetUsers"
                        }
                    },
                    "400": {
                        "description": "It occurs when user enter invalid params",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "It occurs when error happenes internal service",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/users/update": {
            "put": {
                "description": "This endpoint is for updating password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update Password",
                "parameters": [
                    {
                        "description": "User ID",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.RequestUpdatePassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message about updating password",
                        "schema": {
                            "$ref": "#/definitions/users.ResponseUpdatePassword"
                        }
                    },
                    "400": {
                        "description": "Occurs when user enters invalid params",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Occurs when an internal service error happens",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/users/{id}/GetProfile": {
            "get": {
                "description": "this is for getting a user information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get User information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id is required",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "returns users info",
                        "schema": {
                            "$ref": "#/definitions/users.ResponseGetProfile"
                        }
                    },
                    "400": {
                        "description": "It occurs when user enter invalid params",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "It occurs when error happenes internal service",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/users/{id}/delete": {
            "delete": {
                "description": "This endpoint is for deleting a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message about deleting user",
                        "schema": {
                            "$ref": "#/definitions/users.ResponseDeleteUser"
                        }
                    },
                    "400": {
                        "description": "Occurs when user enters invalid params",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Occurs when an internal service error happens",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/users/{id}/editprofile": {
            "post": {
                "description": "this is for editing user information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Edit Profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id is required",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "all params are required",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.RequestEditProfile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "returns user information about existing user",
                        "schema": {
                            "$ref": "#/definitions/users.ResponseEditProfile"
                        }
                    },
                    "400": {
                        "description": "It occurs when user enter invalid params",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "It occurs when error happenes internal service",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/users/{id}/follow": {
            "post": {
                "description": "this is for following user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Follow",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id is required",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "all params are required and followoreId is taking from params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.RequestFollow"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "returns all ditails about following",
                        "schema": {
                            "$ref": "#/definitions/users.ResponseFollow"
                        }
                    },
                    "400": {
                        "description": "It occurs when user enter invalid params",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "It occurs when error happenes internal service",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/users/{id}/followers": {
            "get": {
                "description": "this is for getting followers information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get Followers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id is required",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit is required",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page is required",
                        "name": "page",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "returns followers information",
                        "schema": {
                            "$ref": "#/definitions/users.ResponseGetFollowers"
                        }
                    },
                    "400": {
                        "description": "It occurs when user enter invalid params",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "It occurs when error happenes internal service",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/users/{id}/stories/create": {
            "post": {
                "description": "this is for creating story",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stories"
                ],
                "summary": "Create Story",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id is required",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "all params are required",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/stories.RequestCreateStory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "returns story information",
                        "schema": {
                            "$ref": "#/definitions/stories.ResponseCreateStory"
                        }
                    },
                    "400": {
                        "description": "It occurs when user enter invalid params",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "It occurs when error happenes internal service",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/users/{id}/validate": {
            "get": {
                "description": "this is for chacking user is exists",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Validate User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id is required",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "returns boolean value about existing user",
                        "schema": {
                            "$ref": "#/definitions/users.Status"
                        }
                    },
                    "400": {
                        "description": "It occurs when user enter invalid params",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "It occurs when error happenes internal service",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "interactions.Author": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "interactions.Comment": {
            "type": "object",
            "properties": {
                "author": {
                    "$ref": "#/definitions/interactions.Author"
                },
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "interactions.RequestCreateComment": {
            "type": "object",
            "properties": {
                "author_id": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "story_id": {
                    "type": "string"
                }
            }
        },
        "interactions.RequestLikeStory": {
            "type": "object",
            "properties": {
                "story_id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "interactions.ResponseCreateComment": {
            "type": "object",
            "properties": {
                "author_id": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "story_id": {
                    "type": "string"
                }
            }
        },
        "interactions.ResponseGetComments": {
            "type": "object",
            "properties": {
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/interactions.Comment"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "interactions.ResponseLikeStory": {
            "type": "object",
            "properties": {
                "liked_at": {
                    "type": "string"
                },
                "story_id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.Error": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "stories.Author": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "stories.AuthorForGetStoryFullInfo": {
            "type": "object",
            "properties": {
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "stories.RequestCreateStory": {
            "type": "object",
            "properties": {
                "author_id": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "location": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "stories.RequestEditStory": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "location": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "stories.ResponseCreateStory": {
            "type": "object",
            "properties": {
                "author_id": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "stories.ResponseDeleteStory": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "stories.ResponseEditStory": {
            "type": "object",
            "properties": {
                "author_id": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "stories.ResponseGetStories": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "stories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/stories.StoryForGet"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "stories.ResponseGetStoryFullInfo": {
            "type": "object",
            "properties": {
                "author": {
                    "$ref": "#/definitions/stories.AuthorForGetStoryFullInfo"
                },
                "comments_count": {
                    "type": "integer"
                },
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "likes_count": {
                    "type": "integer"
                },
                "location": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "stories.StoryForGet": {
            "type": "object",
            "properties": {
                "author": {
                    "$ref": "#/definitions/stories.Author"
                },
                "comments_count": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "likes_count": {
                    "type": "integer"
                },
                "location": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "users.Follower": {
            "type": "object",
            "properties": {
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "users.RequestEditProfile": {
            "type": "object",
            "properties": {
                "bio": {
                    "type": "string"
                },
                "countries_visited": {
                    "type": "integer"
                },
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "users.RequestFollow": {
            "type": "object",
            "properties": {
                "follower_id": {
                    "type": "string"
                },
                "following_id": {
                    "type": "string"
                }
            }
        },
        "users.RequestUpdatePassword": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string"
                }
            }
        },
        "users.ResponseDeleteUser": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "users.ResponseEditProfile": {
            "type": "object",
            "properties": {
                "bio": {
                    "type": "string"
                },
                "countries_visited": {
                    "type": "integer"
                },
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "users.ResponseFollow": {
            "type": "object",
            "properties": {
                "followed_at": {
                    "type": "string"
                },
                "follower_id": {
                    "type": "string"
                },
                "following_id": {
                    "type": "string"
                }
            }
        },
        "users.ResponseGetFollowers": {
            "type": "object",
            "properties": {
                "followers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/users.Follower"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "users.ResponseGetProfile": {
            "type": "object",
            "properties": {
                "bio": {
                    "type": "string"
                },
                "countries_visited": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "users.ResponseGetUsers": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/users.User"
                    }
                }
            }
        },
        "users.ResponseUpdatePassword": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "users.Status": {
            "type": "object",
            "properties": {
                "Success": {
                    "type": "boolean"
                }
            }
        },
        "users.User": {
            "type": "object",
            "properties": {
                "countries_visited": {
                    "type": "integer"
                },
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}